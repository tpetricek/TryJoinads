> Welcome to Try Joinads

Introducing Try Joinads
=======================

Welcome to Try Joinads!

This web site is an interactive tutorial that introduces _joinads_ - a research extension of the F# language.
The tutorial presents several uses of the extension. It focuses on concurrent, parallel and asynchronous
programming, but it also shows several examples from other domains, including parsers and option values.
Aside from uses of _joinads_, there are also several sections that discuss how to implement joinads for other
types of values or computations.

Aside from joinads, the web site also includes examples of encoding various abstract computation types
(such as monads, monoids, applicative functors and monad transformers) using F# computation expressions.
These use mostly standard F# computation expressions, with an extension for applicative functors and
accompany the article [F# Computation Zoo](pubs.html). 

The tutorial uses an Interactive F# console hosted in a web browser using [Silverlight][sl] (Windows or Mac) or 
[Moonlight][ml] (Linux), so you can run the tutorials in your browser and experiment on your own. The console is based
on an [open-source release][oss] of the F# compiler. A research implementation of the F# compiler that implements
joinads is [also available][fsx].

If you have any comments or suggestions regarding the tutorials, or if you have another interesting implementation
of joinads or an extension of the F# compiler that could be added, please get in touch: <tomas@tomasp.net> or 
[@tomaspetricek](http://twitter.com/tomaspetricek).

 [sl]: http://www.silverlight.net/ "Silverlight homepage"
 [ml]: http://www.go-mono.com/moonlight/ "Moonlight homepage"
 [oss]: http://fsharppowerpack.codeplex.com/ "Open-source release of F#"
 [fsx]: https://github.com/tpetricek/FSharp.Extensions "F# Extensions Source Code"


Joinads research extension
--------------------------

### Introduction

The following article is the best place to start if you haven't seen joinads before.
It shows a basic example and includes links to other resources.

 * [**Introduction**](intro.html) shows a
   basic example of parallel programming with joinads in F# and provides a 
   general overview of the concept, as well as basic Haskell example.

 * [**Publications**](pubs.html) provides
   links to academic publications related to joinads. These contain more details about
   _joinad_ as an algebraic structure and about the language feature design.

### Programming with joinads

The following articles show several examples of using joinads for concurrent, parallel 
and reactive programming. They use an implementation of joinad operations that is available
in standard joinads library.

 * [**Asynchronous workflows and joinads**](use/async.html)
   shows how to use joinads in asynchronous programming. Applications include asynchronously waiting
   for multiple computations or waiting for the first computation that produces certain value.

 * [**Task-based parallelism**](use/tasks.html)
   has been already demonstrated in the [introduction](intro.html). This tutorial
   shows a more complete example that uses joinads for recursive tree processing with
   short-circuiting.

 * [**Agent-based programming**](use/agents.html)
   can benefit from the notation used by joinads when implementing agent (`MailboxProcessor`) that
   uses the `Scan` method. This tutorial shows several examples.

 * [**Concurrent programming using joins**](use/joins.html) 
   shows a library that uses joinads to embed _join calculus_ in F#. The library can be used for
   writing concurrent primitives, such as blocking collection and others.

### Implementing joinads

The following articles briefly explain how to implement joinads for several standard types
of computations including `option` values and F# asynchronous workflows.

 * [**Programming with option values**](implement/options.html)
   shows the implementation of joinad computation builder for the `option<'T>` type. The sample
   uses parallel _composition_ and _choice_.

 * [**Writing parsers with joinads**](implement/parsers.html)
   shows that joinads are useful in areas other than just concurrent and parallel programming.
   For parsers, joinads make it possible to express the _intersection of languages_.

 * [**Joinads for asynchronous workflows**](implement/async.html)
   explains how to add joinad operations to the `Async<'T>` type. The sample also provides more
   details on how aliasing is used in joinads.

F# computation zoo
------------------

### Monads 

 * [**Functional monads and laws**](computations/monads.html) discusses the definition of computation
   expression for a monad in terms of _bind_ and _return_ and shows syntactic equalities that 
   correspond to well-known monad laws.

 * [**Sequencing of monads**](computations/monads.html#seq) shows how (untracked) effects can be 
   handled in computation expressions. The section shows both approaches - for _monadic containers_
   and for _monadic computations_.

 * [**Monadic control flow**](computations/monads.html#control) extends the previous definitions of 
   a monad with additional control flow constructs including `for` and `while` loops and
   exception handling constructs.

### Semigroups and monoids

 * [**Monoidal computation**](computations/monoids.html) shows how to define computatione expressions
   for a simple monoidal structure. It discusses the ways of embedding effects in monoidal
   computations and shows syntactic equalities that correspond to monoid laws.
   
### Composed computations

 * [**Additive parsers**](computations/additive.html#parsers) shows one alternative syntax for 
   working with computations that are _monadic_ and _monoidal_ at the same time.
   The syntax is demonstrated using parser combinators.

 * [**Additive sequences**](computations/additive.html#seq) shows an alternative syntax for 
   working with _monadic_ and _monoidal_ computation. The syntax emphasizes the 
   monoidal structure and is demonstrated using lists.

 * [**Layered monads**](computations/layered.html) demonstrates a computation expression that can be
   used to work with computations that are formed by composing monads. The example
   is based on monad transformers known from Haskell.

### Applicative functors

 * [**Applicative functors**](computations/applicative.html) demonstrates a research extension for 
   F# that allows using _applicative functors_ (also called _idioms_) using the 
   computation expression syntax. An example uses formlets that are used for building
   HTML forms.

<span></span>